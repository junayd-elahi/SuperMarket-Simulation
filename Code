import tkinter
import threading
import time
import random
import datetime

# Global flag to control thread execution
is_running = False
check_and_close_empty_lanes_timer = None

# ==================== Lane Classes ====================

class LaneBase:
    @staticmethod
    def generate_timestamp():
        return datetime.datetime.now().strftime('%H:%M:%S')


class CheckoutLane(LaneBase):
    all_lanes = {}

    def __init__(self, name: str, max_queue_length: int, time_to_process: int):
        self.name = name
        self.queue = []
        self.status = 'Closed'
        self.MAX_QUEUE_LENGTH = max_queue_length
        self.TTP = time_to_process
        self.processing_thread = None
        CheckoutLane.all_lanes[name] = self

    def calculate_queue_time(self):
        return sum(basket * self.TTP for basket in self.queue)

    def open_lane(self):
        if self.status == 'Closed':
            self.status = 'Open'
            print(f'{self.name} -> Lane opened')

    def close_lane(self):
        self.status = 'Closed'
        print(f'{self.name} -> Lane closed due to inactivity')

    def close_if_empty(self):
        global check_and_close_empty_lanes_timer

        if self.status == 'Open' and not self.queue:
            if not check_and_close_empty_lanes_timer:
                check_and_close_empty_lanes_timer = threading.Timer(30, self.close_lane)
                check_and_close_empty_lanes_timer.start()
            else:
                check_and_close_empty_lanes_timer.cancel()
                check_and_close_empty_lanes_timer = threading.Timer(30, self.close_lane)
                check_and_close_empty_lanes_timer.start()

    def add_to_queue(self, basket_size: int):
        if len(self.queue) < self.MAX_QUEUE_LENGTH and self.status == 'Open':
            if basket_size < 10:
                self.queue.append(basket_size)
            else:
                open_lanes = [
                    lane for lane in CheckoutLane.all_lanes.values()
                    if lane.status == 'Open' and lane.name != self.name
                ]
                if open_lanes:
                    shortest_lane = min(open_lanes, key=lambda l: len(l.queue))
                    shortest_lane.queue.append(basket_size)
                    print(f'{self.name} -> Moved customer to {shortest_lane.name}')
                else:
                    self.queue.append(basket_size)
        else:
            print(f'{self.name} -> Queue full or lane closed')

    def print_lane_status(self):
        estimated_time = self.calculate_queue_time()
        print(f'{self.name} -> Status: {self.status}')
        if self.status == 'Open' and self.queue:
            print(f'Customers: {len(self.queue)}, Est. Time: {estimated_time}s')
        else:
            print('No customers.')

    @staticmethod
    def open_new_lanes():
        closed = [lane for lane in CheckoutLane.all_lanes.values() if lane.status == 'Closed']
        for lane in closed:
            lane.open_lane()

    @staticmethod
    def process_customers():
        while is_running:
            open_lanes = [l for l in CheckoutLane.all_lanes.values() if l.status == 'Open']

            for lane in open_lanes:
                lane.close_if_empty()

            for lane in open_lanes:
                if lane.queue:
                    lane.print_lane_status()
                    lane.processing_thread = threading.Thread(
                        target=CheckoutLane.process_customer, args=(lane,)
                    )
                    lane.processing_thread.start()

            for lane in open_lanes:
                if lane.processing_thread:
                    lane.processing_thread.join()

            if len(open_lanes) == len(CheckoutLane.all_lanes):
                CheckoutLane.open_new_lanes()

            time.sleep(random.randint(1, 5))

    @staticmethod
    def process_customer(lane):
        basket = lane.queue.pop(0)
        print(f'{lane.name} -> Processing {basket} items...')
        time.sleep(basket * lane.TTP)
        print(f'{lane.name} -> Customer complete')


# ==================== Simulation Functions ====================

def print_lane_statuses(lanes):
    while is_running:
        print("\nLane Statuses:")
        for lane in lanes:
            lane.print_lane_status()
        print("=" * 30)
        time.sleep(45)

def simulate_customers():
    while is_running:
        time.sleep(random.uniform(5, 10))
        basket = random.randint(1, 20)
        open_lanes = [l for l in CheckoutLane.all_lanes.values() if l.status == 'Open']
        if open_lanes:
            lane = random.choice(open_lanes)
            lane.add_to_queue(basket)
            print(f'Customer with {basket} items joined {lane.name}')
        else:
            print(f"No lanes open for customer with {basket} items.")

def check_and_close_empty_lanes(lanes):
    while is_running:
        for lane in lanes:
            lane.close_if_empty()
        time.sleep(45)

def check_and_update_lanes(lanes):
    while is_running:
        if CheckoutLane.all_lanes.get('S1') and CheckoutLane.all_lanes['S1'].status == 'Closed':
            CheckoutLane.all_lanes['S1'].open_lane()
        if CheckoutLane.all_lanes.get('R1') and CheckoutLane.all_lanes['R1'].status == 'Closed':
            CheckoutLane.all_lanes['R1'].open_lane()
        for lane in lanes:
            if lane.status == 'Closed' and len(lane.queue) >= lane.MAX_QUEUE_LENGTH * 0.8:
                lane.open_lane()
        time.sleep(45)

def run_sub_program():
    print("Run Sub-program placeholder")


# ==================== GUI Setup ====================

def start_checkout_simulation():
    global is_running
    is_running = True
    threads = [
        threading.Thread(target=print_lane_statuses, args=(CheckoutLane.all_lanes.values(),)),
        threading.Thread(target=simulate_customers),
        threading.Thread(target=check_and_close_empty_lanes, args=(CheckoutLane.all_lanes.values(),)),
        threading.Thread(target=check_and_update_lanes, args=(CheckoutLane.all_lanes.values(),)),
        threading.Thread(target=CheckoutLane.process_customers),
    ]
    for t in threads:
        t.start()
    print("Simulation started.")

def stop_checkout_simulation():
    global is_running
    is_running = False
    print("Simulation stopping...")

def exit_checkout_application():
    global is_running
    is_running = False
    window.destroy()


# ==================== Lane Initialization ====================

self_lanes = [CheckoutLane(f'S{i}', 15, 6) for i in range(1, 9)]
regular_lanes = [CheckoutLane(f'R{i}', 5, 4) for i in range(1, 6)]
all_lanes = self_lanes + regular_lanes
self_lanes[0].open_lane()
regular_lanes[0].open_lane()

# ==================== GUI ====================

window = tkinter.Tk()
window.geometry("700x700")
window.title("Checkout System")

label = tkinter.Label(window, text="Checkout Simulation", font=("Arial", 18))
label.pack()

buttons = [
    ("Start Checkout Simulation", start_checkout_simulation),
    ("Run Sub-program", run_sub_program),
    ("Stop Checkout Simulation", stop_checkout_simulation),
    ("Exit", exit_checkout_application),
]

for text, command in buttons:
    tkinter.Button(window, text=text, font=("Arial", 18), command=command).pack(padx=10, pady=10)

window.mainloop()
